# LOAD LIBRARIES
print("loading libraries")
library(WGCNA)
library(tidyverse)

# SET BASE DIRECTORY
print("setting base directory")
base_dir <- "/data/smithral/sgacc_wgcna/transcripts/"

# LOAD DATA
prefix <- "14Nov2023_RARE_regress_qSV1.11_ageDeath_RNAbatch_GCperc"
print("loading data")
load(paste0(base_dir, "data/", prefix, "_matrix.RDS")) # count_matrix

# SET SFT
soft_power <- 3
        
# CALCULATE CO-EXPRESSION SIMILARITY AND ADJACENCY
print("calculating adjacency")
enableWGCNAThreads()
adjacency <- adjacency(count_matrix, power = soft_power)

# CALCULATE TOPOLOGICAL OVERLAP MATRIX (TOM)
print("calculating TOM")
TOM <- TOMsimilarity(adjacency)
diss_TOM <- 1 - TOM

# HIERARCHICAL CLUSTERING ON TOM MATRIX
print("clustering TOM")
gene_tree <- hclust(as.dist(diss_TOM))

# ASSIGN MODULES IN LOOP
  df_combos <- expand_grid(
    min_size = c(30, 40, 50),
    cut_height = seq(from = 0.99, to = 1.00, by = 0.003)
  )
  
  df_modules <- map2_dfr(.x = df_combos$min_size,
                         .y = df_combos$cut_height,
                         .f = ~ tibble(sft = soft_power,
                                       min_size = .x,
                                       cut_height = .y,
                                       ensembl_transcript_id = colnames(count_matrix),
                                       module = cutreeDynamic(dendro = gene_tree,
                                                              distM = diss_TOM,
                                                              pamRespectsDendro = FALSE,
                                                              minClusterSize = .x,
                                                              cutHeight = .y)
                         )
  ) %>% 
    mutate(module = factor(module, levels = 0:(max(module))))

# ASSIGN COLORS TO MODULES    
  df_modules <- df_modules %>% 
    mutate(color = labels2colors(as.numeric(as.character(module))))

# SAVE OBJECTS
print("saving df_modules output")
save(df_modules, file = paste0(base_dir, "outputs/", prefix, "_SIGNED_SFT", soft_power, "_MODS.RDS"))

print("finished")